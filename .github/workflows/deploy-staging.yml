name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: 'staging'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build packages
      run: |
        npm --workspace=@shared/utils run build
        npm --workspace=@services/processing run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy serverless backend to staging
      run: |
        cd infra
        npm install
        serverless deploy --stage staging
      env:
        MET_API_KEY: ${{ secrets.MET_API_KEY_STAGING }}
        MAPS_API_KEY: ${{ secrets.MAPS_API_KEY_STAGING }}

    - name: Get staging API URL
      id: get-staging-api-url
      run: |
        API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`disaster-alert-system-staging`].ApiEndpoint' --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Build and deploy frontend to staging
      run: |
        echo "VITE_API_BASE_URL=${{ steps.get-staging-api-url.outputs.api_url }}" > apps/web/.env.staging
        npm --workspace=web run build
        aws s3 sync apps/web/dist s3://${{ secrets.S3_BUCKET_NAME_STAGING }} --delete

    - name: Run integration tests
      run: |
        npm --workspace=web run test:integration
      env:
        API_BASE_URL: ${{ steps.get-staging-api-url.outputs.api_url }}

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
