name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build shared package
      run: npm --workspace=@shared/utils run build

    - name: Build processing service
      run: npm --workspace=@services/processing run build

    - name: Build web app
      run: npm --workspace=web run build

    - name: Run shared package tests
      run: npm --workspace=@shared/utils run test

    - name: Run processing service tests
      run: npm --workspace=@services/processing run test

    - name: Run web app tests
      run: npm --workspace=web run test

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./packages/shared/coverage/lcov.info,./services/processing/coverage/lcov.info,./apps/web/coverage/lcov.info
      if: always()

  deploy-backend:
    name: Deploy Backend
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build packages
      run: |
        npm --workspace=@shared/utils run build
        npm --workspace=@services/processing run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy serverless backend
      run: |
        cd infra
        npm install
        npm run deploy
      env:
        MET_API_KEY: ${{ secrets.MET_API_KEY }}
        MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}

    - name: Get API Gateway URL
      id: get-api-url
      run: |
        API_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`disaster-alert-system`].ApiEndpoint' --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Update frontend environment
      run: |
        echo "VITE_API_BASE_URL=${{ steps.get-api-url.outputs.api_url }}" > apps/web/.env.production

  deploy-frontend:
    name: Deploy Frontend
    needs: deploy-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build web app
      run: npm --workspace=web run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        aws s3 sync apps/web/dist s3://${{ secrets.S3_BUCKET_NAME }} --delete

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
