#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

console.log('üîß AWS Credentials Setup Helper\n');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, resolve);
    });
}

async function setupAWSCredentials() {
    console.log('This script will help you set up AWS credentials for the disaster detection system.\n');

    console.log('üìã You need AWS credentials with the following permissions:');
    console.log('   - DynamoDB: Full access to create/read/write tables');
    console.log('   - SNS: Full access to create/send notifications');
    console.log('   - Comprehend: Full access for text analysis');
    console.log('   - IAM: Read access to check permissions\n');

    console.log('üîó Get your credentials from:');
    console.log('   https://console.aws.amazon.com/iam/home#/users\n');

    const credentialType = await askQuestion('Are you using permanent credentials (AKIA...) or temporary credentials (ASIA...)? (permanent/temporary): ');

    if (credentialType.toLowerCase() !== 'permanent' && credentialType.toLowerCase() !== 'temporary') {
        console.log('‚ùå Please choose "permanent" or "temporary"');
        process.exit(1);
    }

    const accessKeyId = await askQuestion('Enter your AWS_ACCESS_KEY_ID: ');
    const secretAccessKey = await askQuestion('Enter your AWS_SECRET_ACCESS_KEY: ');
    const region = await askQuestion('Enter your AWS_REGION (default: us-east-1): ') || 'us-east-1';

    let sessionToken = '';
    if (credentialType.toLowerCase() === 'temporary') {
        sessionToken = await askQuestion('Enter your AWS_SESSION_TOKEN: ');
    }

    // Create .env content
    let envContent = `# AWS Credentials Configuration
# Generated by setup-aws-credentials.js

AWS_ACCESS_KEY_ID=${accessKeyId}
AWS_SECRET_ACCESS_KEY=${secretAccessKey}
AWS_REGION=${region}
`;

    if (sessionToken) {
        envContent += `AWS_SESSION_TOKEN=${sessionToken}\n`;
    }

    envContent += `
# DynamoDB Configuration
DYNAMODB_ENDPOINT=
DYNAMODB_REGION=${region}

# SNS Configuration (for notifications)
SNS_TOPIC_ARN=
SNS_REGION=${region}

# Comprehend Configuration
COMPREHEND_REGION=${region}

# Social Media API Keys (optional - for real API integration)
TWITTER_BEARER_TOKEN=
REDDIT_CLIENT_ID=
REDDIT_CLIENT_SECRET=
REDDIT_USER_AGENT=
`;

    // Write .env file
    const envPath = path.join(__dirname, '..', '.env');
    try {
        fs.writeFileSync(envPath, envContent);
        console.log('\n‚úÖ .env file created successfully!');
        console.log(`üìÅ Location: ${envPath}`);
    } catch (error) {
        console.log('\n‚ùå Error creating .env file:', error.message);
        console.log('Please create the file manually with the following content:');
        console.log('\n' + envContent);
        process.exit(1);
    }

    console.log('\nüß™ Testing AWS credentials...');

    // Test credentials
    try {
        const { DynamoDBClient, ListTablesCommand } = require('@aws-sdk/client-dynamodb');

        const credentials = {
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey
        };

        if (sessionToken) {
            credentials.sessionToken = sessionToken;
        }

        const client = new DynamoDBClient({
            region: region,
            credentials: credentials
        });

        const command = new ListTablesCommand({});
        const response = await client.send(command);

        console.log('   ‚úÖ AWS credentials are valid!');
        console.log(`   üìä Found ${response.TableNames.length} DynamoDB tables in ${region}`);

        if (response.TableNames.length > 0) {
            console.log('   üìã Existing tables:');
            response.TableNames.forEach((tableName, index) => {
                console.log(`      ${index + 1}. ${tableName}`);
            });
        }

        console.log('\n‚úÖ AWS Credentials Setup Complete!');
        console.log('\nüöÄ Next Steps:');
        console.log('   1. Run: cd scripts && node test-dynamodb-with-env.js');
        console.log('   2. If tables don\'t exist, create them using AWS Console or CLI');
        console.log('   3. Run the full system: npm run enhanced-comprehensive');

    } catch (error) {
        console.log('   ‚ùå AWS credentials test failed!');
        console.log(`   Error: ${error.message}`);

        if (error.message.includes('security token')) {
            console.log('\nüí° Security Token Issue:');
            console.log('   - If using temporary credentials, make sure AWS_SESSION_TOKEN is correct');
            console.log('   - If using permanent credentials, make sure they are not expired');
            console.log('   - Check that your AWS user has the required permissions');
        } else if (error.message.includes('Access Denied')) {
            console.log('\nüí° Permission Issue:');
            console.log('   Your AWS user needs DynamoDB permissions.');
            console.log('   Attach the "AmazonDynamoDBFullAccess" policy to your user.');
        } else if (error.message.includes('InvalidUserID')) {
            console.log('\nüí° Invalid Credentials:');
            console.log('   The AWS Access Key ID is not valid.');
            console.log('   Please check your credentials and try again.');
        }

        console.log('\nüîß Troubleshooting:');
        console.log('   1. Verify credentials in AWS Console');
        console.log('   2. Check IAM permissions for your user');
        console.log('   3. Ensure you\'re using the correct AWS region');
        console.log('   4. Try running: aws sts get-caller-identity');
    }

    rl.close();
}

// Run the setup
if (require.main === module) {
    setupAWSCredentials().catch(console.error);
}

module.exports = setupAWSCredentials;
